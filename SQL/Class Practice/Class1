SELECT * FROM actor; --SELECT is for selecting certain criteria (*)== all
SELECT actor_id,first_name,last_name FROM actor; --FROM is to select where 
--the info is coming from
SELECT * FROM customer; 
SELECT first_name,last_name,email FROM customer LIMIT 5;--LIMIT is to limit how
--many rows we want to see
SELECT DISTINCT * FROM film;-- DISTINCT is to select non repeated values
SELECT DISTINCT first_name FROM actor ORDER BY first_name;-- ORDER BY is for
--putting values into alphabetical/numerical order based on a certain column/
--columns (reading from left to right to determine what gets ordered first and
--so on)
SELECT title,replacement_cost FROM film ORDER BY title;
SELECT title,replacement_cost FROM film ORDER BY replacement_cost,title;
SELECT title,replacement_cost FROM film ORDER BY title ASC;
--ACS = Acsending order
SELECT title,replacement_cost FROM film ORDER BY title DESC;
--DESC= descending order
SELECT replacement_cost FROM film WHERE title='Academy Dinosaur';--WHERE allows
--you to name a condition
SELECT title FROM film WHERE replacement_cost=9.99;
SELECT * FROM customer
WHERE first_name = 'Jared';
--we want to find the email address for one of our customers
SELECT first_name FROM customer;
SELECT first_name FROM customer WHERE first_name='Linda';
SELECT email FROM customer WHERE first_name='Linda';
--We want a description of a particular movie, can you access the movie 
--description for a certain movie?
SELECT title FROM film;
SELECT description FROM film WHERE title='Bikini Borrowers';
--Find a customers phone number to offer them a promotion?
SELECT first_name FROM customer;
SELECT first_name FROM customer WHERE first_name='Patricia';
--SELECT phone FROM customer WHERE first_name='Patricia'; (in this case the
--table "customer" does not have a phone column but this code would work if it
--did)
------------------------------------------------------------------------------
------------------------Creating tables---------------------------------------
------------------------------------------------------------------------------
CREATE TABLE cars --words after CREATE TABLE will be the table's name
(license_plate int NOT NULL, color_of_car char, first_name varchar(255) NOT NULL,--Varchar accepts any 
 --size variable, Char restricts evrything to the first 4 characters
 last_name varchar(225) NOT NULL,registration_number int UNIQUE NOT NULL,--Varchar also allows you to 
 --select the maximum number of charcaters allowed
 PRIMARY KEY (license_plate,registration_number)); --Primary KEY is a unique variable
 --assigned to each row in the table. Primary KEY can be a combination of multiple columns if desired 
 --but there can only be one per table. Primary key can be written on a different line like seen above
 --or right into the same line as desired code.
 --NOT NULL prevents not accepted values from being entered into the table's column
 --UNIQUE prevents duplicates in any given column, can be multiple ones per table
 --When craeting a table one muct refresh the database to see the updates
 ------------------------------------------------------------------------------
CREATE TABLE hospital
(patient_id serial PRIMARY KEY NOT NULL,first_name varchar NOT NULL,
 last_name varchar NOT NULL,email varchar, sign_up_date date NOT NULL, time_in_hospital time);
 ------------------------------------------------------------------------------
 CREATE TABLE practice_table
 (first_name varchar(20),
  last_name varchar(50) NOT NULL,
 email_address varchar(355),
 address varchar(50),
 city varchar NOT NULL,
 state_ varchar NOT NULL,
 customer_ID int PRIMARY KEY NOT NULL);
 
 